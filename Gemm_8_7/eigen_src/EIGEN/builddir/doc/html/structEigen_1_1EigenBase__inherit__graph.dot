digraph "EigenBase&lt; Derived &gt;"
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{EigenBase\< Derived \>\n||+ addTo()\l+ applyThisOnTheLeft()\l+ applyThisOnTheRight()\l+ cols()\l+ const_cast_derived()\l+ const_derived()\l+ derived()\l+ derived()\l+ evalTo()\l+ rows()\l+ size()\l+ subTo()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node2 [label="{DenseCoeffsBase\< Derived,\l ReadOnlyAccessors \>\n||+ coeff()\l+ coeff()\l+ coeffByOuterInner()\l+ colIndexByOuterInner()\l+ operator()()\l+ operator()()\l+ operator[]()\l+ packet()\l+ packet()\l+ packetByOuterInner()\l+ rowIndexByOuterInner()\l+ w()\l+ x()\l+ y()\l+ z()\l# coeffRef()\l# coeffRefByOuterInner()\l# colStride()\l# copyCoeff()\l# copyCoeffByOuterInner()\l# copyPacket()\l# copyPacketByOuterInner()\l# innerStride()\l# outerStride()\l# rowStride()\l# stride()\l# writePacket()\l# writePacketByOuterInner()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html",tooltip="Base class providing read-only coefficient access to matrices and arrays. "];
  Node2 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node3 [label="{DenseCoeffsBase\< Derived,\l DirectAccessors \>\n||+ colStride()\l+ innerStride()\l+ outerStride()\l+ rowStride()\l+ stride()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html",tooltip="Base class providing direct read-only coefficient access to matrices and arrays. "];
  Node2 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node4 [label="{DenseCoeffsBase\< Derived,\l WriteAccessors \>\n||+ coeffRef()\l+ coeffRef()\l+ coeffRefByOuterInner()\l+ operator()()\l+ operator()()\l+ operator[]()\l+ w()\l+ writePacket()\l+ writePacket()\l+ writePacketByOuterInner()\l+ x()\l+ y()\l+ z()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html",tooltip="Base class providing read/write coefficient access to matrices and arrays. "];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node5 [label="{DenseCoeffsBase\< Derived,\l DirectWriteAccessors \>\n||+ colStride()\l+ innerStride()\l+ outerStride()\l+ rowStride()\l+ stride()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html",tooltip="Base class providing direct read/write coefficient access to matrices and arrays. ..."];
  Node1 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node6 [label="{PermutationBase\< Derived \>\n||+ applyTranspositionOnTheLeft()\l+ applyTranspositionOnTheRight()\l+ cols()\l+ indices()\l+ indices()\l+ inverse()\l+ operator*()\l+ operator*()\l+ operator=()\l+ operator=()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationBase.html",tooltip="Base class for permutations. "];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node7 [label="{PermutationMatrix\<\l Dynamic, Dynamic, Index \>\n|# m_indices\l|+ indices()\l+ indices()\l+ operator=()\l+ operator=()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationMatrix.html"];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node8 [label="{SparseMatrixBase\< Derived \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 137 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html",tooltip="Base class of any sparse matrices or sparse expressions. "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node9 [label="{MappedSparseMatrix\l\< Scalar, ColMajor,\l Index \>\n|# m_innerIndices\l# m_innerSize\l# m_nnz\l# m_outerIndex\l# m_outerSize\l# m_values\l|+ coeff()\l+ coeffRef()\l+ cols()\l+ innerIndexPtr()\l+ innerIndexPtr()\l+ innerSize()\l+ isCompressed()\l+ MappedSparseMatrix()\l+ nonZeros()\l+ outerIndexPtr()\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1MappedSparseMatrix.html"];
  Node8 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node10 [label="{SparseMatrix\< Scalar \>\n|# m_data\l# m_innerNonZeros\l# m_innerSize\l# m_outerIndex\l# m_outerSize\l|+ coeff()\l+ coeffRef()\l+ cols()\l+ conservativeResize()\l+ data()\l+ data()\l+ diagonal()\l+ finalize()\l+ innerIndexPtr()\l+ innerIndexPtr()\land 40 more...\l# initAssignment()\l# innerNonZeros()\l# innerNonZeros()\l# insertCompressed()\l# insertUncompressed()\l# reserveInnerVectors()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrix.html"];
  Node8 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node11 [label="{SparseMatrix\< Scalar,\l ColMajor, Index \>\n|# m_data\l# m_innerNonZeros\l# m_innerSize\l# m_outerIndex\l# m_outerSize\l|+ coeff()\l+ coeffRef()\l+ cols()\l+ conservativeResize()\l+ data()\l+ data()\l+ diagonal()\l+ finalize()\l+ innerIndexPtr()\l+ innerIndexPtr()\land 40 more...\l# initAssignment()\l# innerNonZeros()\l# innerNonZeros()\l# insertCompressed()\l# insertUncompressed()\l# reserveInnerVectors()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrix.html"];
  Node8 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node12 [label="{SparseMatrix\< Scalar,\l ColMajor, int \>\n|# m_data\l# m_innerNonZeros\l# m_innerSize\l# m_outerIndex\l# m_outerSize\l|+ coeff()\l+ coeffRef()\l+ cols()\l+ conservativeResize()\l+ data()\l+ data()\l+ diagonal()\l+ finalize()\l+ innerIndexPtr()\l+ innerIndexPtr()\land 40 more...\l# initAssignment()\l# innerNonZeros()\l# innerNonZeros()\l# insertCompressed()\l# insertUncompressed()\l# reserveInnerVectors()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrix.html"];
  Node8 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node13 [label="{SparseMatrix\< Scalar,\l RowMajor \>\n|# m_data\l# m_innerNonZeros\l# m_innerSize\l# m_outerIndex\l# m_outerSize\l|+ coeff()\l+ coeffRef()\l+ cols()\l+ conservativeResize()\l+ data()\l+ data()\l+ diagonal()\l+ finalize()\l+ innerIndexPtr()\l+ innerIndexPtr()\land 40 more...\l# initAssignment()\l# innerNonZeros()\l# innerNonZeros()\l# insertCompressed()\l# insertUncompressed()\l# reserveInnerVectors()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrix.html"];
  Node8 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node14 [label="{SparseMatrix\< Scalar,\l RowMajor, Index \>\n|# m_data\l# m_innerNonZeros\l# m_innerSize\l# m_outerIndex\l# m_outerSize\l|+ coeff()\l+ coeffRef()\l+ cols()\l+ conservativeResize()\l+ data()\l+ data()\l+ diagonal()\l+ finalize()\l+ innerIndexPtr()\l+ innerIndexPtr()\land 40 more...\l# initAssignment()\l# innerNonZeros()\l# innerNonZeros()\l# insertCompressed()\l# insertUncompressed()\l# reserveInnerVectors()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrix.html"];
  Node1 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node15 [label="{PermutationBase\< Map\l\< PermutationMatrix\<\l SizeAtCompileTime, MaxSizeAt\lCompileTime, IndexType \>,\l _PacketAccess \> \>\n||+ applyTranspositionOnTheLeft()\l+ applyTranspositionOnTheRight()\l+ cols()\l+ indices()\l+ indices()\l+ inverse()\l+ operator*()\l+ operator*()\l+ operator=()\l+ operator=()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationBase.html"];
  Node1 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node16 [label="{PermutationBase\< Permutation\lMatrix\< SizeAtCompileTime,\l MaxSizeAtCompileTime, IndexType \> \>\n||+ applyTranspositionOnTheLeft()\l+ applyTranspositionOnTheRight()\l+ cols()\l+ indices()\l+ indices()\l+ inverse()\l+ operator*()\l+ operator*()\l+ operator=()\l+ operator=()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationBase.html"];
  Node16 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node17 [label="{PermutationMatrix\<\l SizeAtCompileTime,\l MaxSizeAtCompileTime,\l IndexType \>\n|# m_indices\l|+ indices()\l+ indices()\l+ operator=()\l+ operator=()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationMatrix.html",tooltip="Permutation matrix. "];
  Node16 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node18 [label="{PermutationMatrix\<\l ColsAtCompileTime,\l MaxColsAtCompileTime \>\n|# m_indices\l|+ indices()\l+ indices()\l+ operator=()\l+ operator=()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationMatrix.html"];
  Node16 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node19 [label="{PermutationMatrix\<\l RowsAtCompileTime,\l MaxRowsAtCompileTime \>\n|# m_indices\l|+ indices()\l+ indices()\l+ operator=()\l+ operator=()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l+ PermutationMatrix()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationMatrix.html"];
  Node1 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node20 [label="{PermutationBase\< Permutation\lWrapper\< _IndicesType \> \>\n||+ applyTranspositionOnTheLeft()\l+ applyTranspositionOnTheRight()\l+ cols()\l+ indices()\l+ indices()\l+ inverse()\l+ operator*()\l+ operator*()\l+ operator=()\l+ operator=()\land 7 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationBase.html"];
  Node20 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node21 [label="{PermutationWrapper\l\< _IndicesType \>\n|# m_indices\l|+ indices()\l+ PermutationWrapper()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1PermutationWrapper.html",tooltip="Class to view a vector of integers as a permutation matrix. "];
  Node1 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node22 [label="{SparseMatrixBase\< Block\l\< SparseMatrix\< _Scalar,\l _Options, _Index \>, BlockRows,\l BlockCols, true \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node23 [label="{SparseMatrixBase\< Block\l\< XprType, BlockRows,\l BlockCols, InnerPanel \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node23 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node24 [label="{BlockImpl\< XprType,\l BlockRows, BlockCols,\l InnerPanel, Sparse \>\n|# m_blockCols\l# m_blockRows\l# m_matrix\l# m_startCol\l# m_startRow\l|+ BlockImpl()\l+ BlockImpl()\l+ coeff()\l+ coeff()\l+ coeffRef()\l+ coeffRef()\l+ cols()\l+ nestedExpression()\l+ rows()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html"];
  Node1 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node25 [label="{SparseMatrixBase\< Block\l\< XprType, BlockRows,\l BlockCols, true \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node26 [label="{SparseMatrixBase\< CwiseBinary\lOp\< BinaryOp, Lhs, Rhs \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node27 [label="{SparseMatrixBase\< CwiseUnary\lOp\< UnaryOp, MatrixType \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node28 [label="{SparseMatrixBase\< CwiseUnary\lView\< ViewOp, MatrixType \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node29 [label="{SparseMatrixBase\< Mapped\lSparseMatrix\< _Scalar,\l _Flags, _Index \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node29 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node30 [label="{MappedSparseMatrix\l\< _Scalar, _Flags, \l_Index \>\n|# m_innerIndices\l# m_innerSize\l# m_nnz\l# m_outerIndex\l# m_outerSize\l# m_values\l|+ coeff()\l+ coeffRef()\l+ cols()\l+ innerIndexPtr()\l+ innerIndexPtr()\l+ innerSize()\l+ isCompressed()\l+ MappedSparseMatrix()\l+ nonZeros()\l+ outerIndexPtr()\land 6 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1MappedSparseMatrix.html",tooltip="Sparse matrix. "];
  Node1 -> Node31 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node31 [label="{SparseMatrixBase\< Sparse\lDenseOuterProduct\< Lhs,\l Rhs, Tr \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node32 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node32 [label="{SparseMatrixBase\< Sparse\lDiagonalProduct\< Lhs,\l Rhs \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node33 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node33 [label="{SparseMatrixBase\< Sparse\lMatrix\< _Scalar, _Options,\l _Index \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node33 -> Node34 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node34 [label="{SparseMatrix\< _Scalar,\l _Options, _Index \>\n|# m_data\l# m_innerNonZeros\l# m_innerSize\l# m_outerIndex\l# m_outerSize\l|+ coeff()\l+ coeffRef()\l+ cols()\l+ conservativeResize()\l+ data()\l+ data()\l+ diagonal()\l+ finalize()\l+ innerIndexPtr()\l+ innerIndexPtr()\land 41 more...\l# initAssignment()\l# innerNonZeros()\l# innerNonZeros()\l# insertCompressed()\l# insertUncompressed()\l# reserveInnerVectors()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrix.html",tooltip="A versatible sparse matrix representation. "];
  Node1 -> Node35 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node35 [label="{SparseMatrixBase\< Sparse\lSparseProduct\< LhsNested,\l RhsNested \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node36 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node36 [label="{SparseMatrixBase\< Sparse\lTriangularView\< MatrixType,\l Mode \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node37 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node37 [label="{SparseMatrixBase\< Sparse\lVector\< _Scalar, _Options,\l _Index \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node37 -> Node38 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node38 [label="{SparseVector\< _Scalar,\l _Flags, _Index \>\n|# m_data\l# m_size\l|+ _data()\l+ _data()\l+ coeff()\l+ coeff()\l+ coeffRef()\l+ coeffRef()\l+ cols()\l+ data()\l+ data()\l+ endFill()\land 35 more...\l# check_template_parameters()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseVector.html",tooltip="a sparse vector class "];
  Node1 -> Node39 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node39 [label="{SparseMatrixBase\< Sparse\lView\< MatrixType \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
  Node1 -> Node40 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="FreeSans"];
  Node40 [label="{SparseMatrixBase\< Transpose\l\< MatrixType \> \>\n|# m_isRValue\l|+ adjoint()\l+ binaryExpr()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ block()\l+ blueNorm()\l+ bottomLeftCorner()\land 135 more...\l# assign()\l# assignGeneric()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classEigen_1_1SparseMatrixBase.html"];
}
