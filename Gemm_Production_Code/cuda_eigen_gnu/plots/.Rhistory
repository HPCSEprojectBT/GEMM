timing <- read.delim("./timing_ss_fast_intel_cuda.csv",check.names = FALSE, header=FALSE);
View(timing)
timing_ss_fast_intel_cuda <- read.csv("~/ETH/6. Semester/HPCSE II/Project2.0/GEMM/Gemm_Production_Code/cuda_eigen/plots/timing_ss_fast_intel_cuda.csv", header=F)
View(timing_ss_fast_intel_cuda)
timing_ss_fast_intel_cuda <- read.csv("./timing_ss_fast_intel_cuda.csv", header=F)
View(timing_ss_fast_intel_cuda)
t1 <- read.csv("./timing_ss_fast_intel_cuda.csv", header=F)
View(t1)
apply(t1,1,mean)
t2 <- subset(t1,x>2)
t2 <- subset(t1,y>2)
View(t1)
t2 <- t1[c(1:14,3:12)]
t2 <- t1[c(1,3)]
t1 <- read.csv("./timing_ss_fast_intel_cuda.csv", header=F)
View(t2)
t2 <- t1[c(3:14)]
t2 <- t1[c(3,14)]
t2 <- t1[c(3)]
View(t2)
t2 <- t1[c(3,4)]
View(t2)
t2 <- t1[c(3,4,5,6,7,8,9,10,11,12,13,14)]
t2 <- t1[c(3,4,5,6,7,8,9,10,11,12,13)]
t2 <- t1[c(3,4)]
View(t2)
t2 <- t1[c(3,4,5)]
View(t2)
t2 <- t1[c(3,4,5,6,7)]
t2 <- t1[c(3,4,5,6,7,8,9,10)]
t2 <- t1[c(3,4,5,6,7,8,9,10,11,12)]
t2 <- t1[c(3,4,5,6,7,8,9,10,11,12,13)]
t2 <- t1[c(3,4,5,6,7,8,9,10,11,12)]
View(t2)
View(t1)
t1 <- read.csv("./timing_ss_fast_intel_cuda.csv", header=F)
View(t1)
t2 <- t1[c(3,4,5,6,7,8,9,10,11,12)]
View(t2)
#par(mar=c(4,7,2,1));
means=apply(t2,1,mean)
View(means)
l
boxplot(means[1]/t(t2),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
#abline(a=0, b=1, col="red")
abline(a=0, b=1, col="red")
plot(t1[c(1)],means[1]/means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
plot(t1[c(1)],means[1]/means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
t2 <- t1[c(3,4,5,6,7,8,9,10,11,12)]
means=apply(t2,1,mean)
View(means)
#boxplot(means[1]/t(t2),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
#abline(a=0, b=1, col="red")
#x=c(1,2,4,8,16,32,64,128)
plot(t1[c(1)],means[1]/means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
View(t1[c(1)])
plot(t1[c(1)],means="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
plot(t1[c(1)],means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
plot(t1[c(1)],means[c(1)],main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
matplot(t1[c(1)],means[c(1)],main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
View(t1[c(1)])
View(means[c(1)])
View(means)
matplot(t1[c(1)],means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
plot(t1[c(1)],means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
matplot(t1[c(1)],means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
matplot(t1[c(1)],means[1]/means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=3)
matplot(t1[c(1)],means[1]/means,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
matplot(t1[c(1)],means[1]/means,type=p,main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
matplot(t1[c(1)],means[1]/means,type="p",main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
matplot(t1[c(1)],means[1]/means,type="l",main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
matplot(t1[c(1)],means[1]/means,type="s",main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
matplot(t1[c(1)],means[1]/means,type="p",main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
abline(a=0, b=1, col="red")
boxplot(means[1]/t(t2),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
View(t2)
abline(a=0, b=1, col="red")
abline(a=0, b=2, col="red")
matplot(t1[c(1)],means[1]/means,type="p", names = c(1,2,4,8,16,32),main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
boxplot(means[1]/t(t2), names = c(1,2,4,8,16,32),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
boxplot(means[1]/t(t2), names = c(1,2,4,9,16,25,36,49,64,81,100,144,196,225,256),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
boxplot(means[1]/t(t2), names = c(1,4,9,16,25,36,49,64,81,100,144,196,225,256),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
abline(a=0, b=2, col="red")
boxplot(means[1]/t(t2), names = t1[c(1)],main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
boxplot(means[1]/t(t2), names = t1[1],main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
View(t1[c(1)])
boxplot(means[1]/t(t2), names = t1[c(1)],main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
boxplot(means[1]/t(t2), names = t(t1[c(1)]),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
matplot(t1[c(1)],means[1]/means,type="p",main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
abline(a=0, b=1, col="red")
boxplot(means[1]/(t2), names = t(t1[c(1)]),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
boxplot(means[1]/t(t2), names = t(t1[c(1)]),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
t2 <- t1[c(4,5,6,7,8,9,10,11,12)]
means=apply(t2,1,mean)
boxplot(means[1]/t(t2), names = t(t1[c(1)]),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
abline(a=0, b=2, col="red")
matplot(t1[c(1)],means[1]/means,type="p",main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
abline(a=0, b=1, col="red")
boxplot(t(t2), names = t(t1[c(1)]),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
abline(a=0, b=2, col="red")
t2 <- t1[c(3,4,5,6,7,8,9,10,11,12)]
means=apply(t2,1,mean)
boxplot(t(t2), names = t(t1[c(1)]),main="strong scaling plot for n = 5040",xlab="Number of nodes", ylab="speedup")
abline(a=0, b=2, col="red")
matplot(t1[c(1)],means[1]/means,type="p",main="strong scaling plot (mpi-cuda, eigen) for n*n = 5040*5040", xlab="Number of nodes", ylab="speedup",col=1)
abline(a=0, b=1, col="red")
